import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import datetime
from bcb import sgs
import json
import requests
import io

# As importa√ß√µes abaixo n√£o est√£o sendo usadas e podem ser removidas para um c√≥digo mais limpo:
# from bcb import currency
# from bcb import Expectativas
# from bcb import TaxaJuros
# import google.generativeai as genai # A menos que seja usada em outra parte n√£o mostrada


# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
st.set_page_config(
    page_title="Minha Aplica√ß√£o Web",
    page_icon="üè¶",
    layout="wide"
)

# --- CARREGAR INDICADORES DO ARQUIVO JSON ---
@st.cache_data(ttl=3600) # Cache para evitar recarregar o JSON a cada intera√ß√£o
def load_indicadores_data():
    """Carrega os dados dos indicadores do arquivo JSON."""
    try:
        with open(".streamlit/indicadores.json", "r", encoding="utf-8") as f:
            indicadores_completos = json.load(f)
    except FileNotFoundError:
        st.error("Erro: O arquivo 'indicadores.json' n√£o foi encontrado na pasta '.streamlit/'.")
        st.stop() # Interrompe a execu√ß√£o se o arquivo n√£o for encontrado
    except json.JSONDecodeError:
        st.error("Erro: O arquivo 'indicadores.json' est√° mal formatado. Verifique a sintaxe JSON.")
        st.stop()

    indicadores_bcb_dict = {item["nome"]: item["codigo_sgs"] for item in indicadores_completos if item["codigo_sgs"] is not None}
    nomes_indicadores = [item["nome"] for item in indicadores_completos]
    indicador_detalhes = {item["nome"]: item for item in indicadores_completos}
    return indicadores_bcb_dict, nomes_indicadores, indicador_detalhes

INDICADORES_BCB_DICT, NOMES_INDICADORES, INDICADOR_DETALHES = load_indicadores_data()


# --- ESTILO CUSTOMIZADO ---
st.markdown(
    """
    <style>
        /* Fundo da aplica√ß√£o */
        .main {
            background: linear-gradient(135deg, #0E1117 0%, #1a1d24 100%);
        }

        /* Cabe√ßalho - vis√≠vel em tema escuro */
        h1 {
            color: #f2f2f2;
            text-align: left;
            font-weight: bold;
            margin-bottom: 1rem;
        }

        /* Texto de par√°grafo principal */
        p {
            font-size: 1.1em;
            line-height: 1.6;
            color: #d0d0d0;
            text-align: justify;
        }

        /* Container da aplica√ß√£o */
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            padding-left: 2rem;
            padding-right: 2rem;
        }

        /* Footer do sidebar */
        /* Este seletor pode mudar dependendo da vers√£o do Streamlit, mas √© um bom ponto de partida */
        .st-emotion-cache-vk33gh { /* Pode precisar de ajuste futuro */
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        .sidebar-footer {
            margin-top: auto;
            text-align: center;
            color: #A9A9A9;
            font-size: 0.8em;
            font-weight: 300;
            padding-bottom: 1rem;
        }

        /* Imagens nas colunas - sem corte */
        [data-testid="stImage"] {
            overflow: hidden;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
        }

        [data-testid="stImage"] img {
            width: 100%;
            height: auto;
            object-fit: contain;
            display: block;
        }

        /* CENTRALIZAR LEGENDAS DAS IMAGENS - USANDO data-testid (MAIS EST√ÅVEL) */
        [data-testid="stImageCaption"] {
            text-align: center;
            color: #d0d0d0;
            font-size: 0.9em;
        }

        /* Ajuste do sidebar */
        [data-testid="stSidebar"] {
            width: 280px;
            min-width: 280px;
        }

        [data-testid="stSidebarContent"] {
            width: 280px;
        }

    </style>
    """,
    unsafe_allow_html=True
)

# --- SIDEBAR ---
with st.sidebar:
    st.image("NE3.png", width=300, output_format="png")
    st.title("Menu")

    abas = [
        "üåê P√°gina inicial",
        "üìà Dashboard",
        "üóÉÔ∏è Dados",
        "üìù An√°lises e Tend√™ncias",
        "‚ö†Ô∏è Alertas e Cen√°rios",
        "üí¨ Feedback"
    ]

    pagina = st.radio("Ir para:", abas)

    st.markdown(
        """
        <div class="sidebar-footer">
            Developed by ¬∑ Marcio V ¬∑
        </div>
        """,
        unsafe_allow_html=True
    )

# --- HEADER ---
def exibe_header(titulo, descricao=None):
    st.markdown(f"<h1>{titulo}</h1>", unsafe_allow_html=True)
    if descricao:
        st.markdown(f"<p style='color:#CCCCCC'>{descricao}</p>", unsafe_allow_html=True)
    st.markdown("---")

@st.cache_data(ttl=3600)
def buscar_dados_bcb(codigos_sgs: dict, nomes_indicadores: list, data_inicial, data_final):
    """
    Busca dados de m√∫ltiplos indicadores no BCB para um determinado per√≠odo.
    Retorna um DataFrame com a Data (no formato dd/mm/aaaa) e os valores dos indicadores.
    """
    data_inicial_str = data_inicial.strftime('%Y-%m-%d')
    data_final_str = data_final.strftime('%Y-%m-%d')

    # Mapeamento nome -> c√≥digo
    nome_para_codigo = {nome: codigos_sgs[nome] for nome in nomes_indicadores if nome in codigos_sgs}
    if not nome_para_codigo:
        st.warning("Nenhum c√≥digo v√°lido encontrado para os indicadores fornecidos.")
        return pd.DataFrame()

    df_list = []
    for nome, codigo in nome_para_codigo.items():
        try:
            serie = sgs.get(codigo, start=data_inicial_str, end=data_final_str)
            if not serie.empty:
                serie.columns = [nome] # For√ßa o nome do indicador como nome da coluna
                df_list.append(serie)
            else:
                st.info(f"Dados vazios para o indicador '{nome}' no per√≠odo selecionado.")
        except Exception as e:
            st.error(f"Erro ao buscar dados do BCB para '{nome}' (c√≥digo {codigo}): {e}")

    if df_list:
        # Usar join no √≠ndice de data para combinar, depois resetar
        df_combinado = pd.concat(df_list, axis=1, join='outer').reset_index()
        df_combinado = df_combinado.rename(columns={df_combinado.columns[0]: 'Data'})

        # Garantir tipo datetime e ordenar antes de formatar
        df_combinado['Data'] = pd.to_datetime(df_combinado['Data'])
        df_combinado = df_combinado.sort_values('Data').reset_index(drop=True)

        # Substituir "None" (strings) por np.nan e preencher valores ausentes
        df_combinado = df_combinado.replace("None", np.nan)
        # Aten√ß√£o: ffill e bfill podem n√£o ser a melhor estrat√©gia para todas as s√©ries
        df_combinado = df_combinado.fillna(method='ffill').fillna(method='bfill')

        # Formatar a coluna de Data para string no final, se necess√°rio para exibi√ß√£o
        df_combinado['Data'] = df_combinado['Data'].dt.strftime('%d/%m/%Y')
        
        return df_combinado
    else:
        st.warning("N√£o foram encontrados dados para o per√≠odo especificado para nenhum dos indicadores.")
        return pd.DataFrame()


# --- CONTE√öDOS DAS ABAS ---
if pagina == "üåê P√°gina inicial":
    exibe_header("Bem-vindo ao Monitor Econ√¥mico - NE3")

    st.markdown(
        """
        <p>
        Este monitor econ√¥mico foi concebido com o objetivo central de simplificar a busca, compila√ß√£o e extra√ß√£o dos principais dados econ√¥micos dispon√≠veis em fontes oficiais, como o Banco Central do Brasil, o IBGE e o IPEA. A plataforma foi desenvolvida a partir de uma arquitetura orientada √† automa√ß√£o e √† integridade das informa√ß√µes, garantindo efici√™ncia na coleta e atualiza√ß√£o dos dados.

O sistema integra diretamente a API do Banco Central, utilizando o Sistema Gerenciador de S√©ries Temporais (SGS), e est√° preparado para incorporar outras bases p√∫blicas de dados econ√¥micos, consolidando m√∫ltiplas fontes em um √∫nico ambiente anal√≠tico.

A solu√ß√£o apresenta pain√©is interativos, acesso a dados brutos e visualiza√ß√µes din√¢micas, permitindo uma compreens√£o r√°pida e aprofundada do cen√°rio macroecon√¥mico. Seu desenvolvimento envolveu uma abordagem estrat√©gica e t√©cnica voltada √† democratiza√ß√£o da informa√ß√£o econ√¥mica e √† melhoria do processo decis√≥rio em ambientes institucionais, corporativos e acad√™micos.

O projeto √© resultado de uma iniciativa independente, idealizada e estruturada por seu criador com foco em usabilidade, confiabilidade e escalabilidade na an√°lise de s√©ries temporais econ√¥micas.
        </p>
        """,
        unsafe_allow_html=True
    )
    st.markdown("---")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.image("agro.jpg", caption="No limite, toda economia volta √† terra.", use_container_width=True)
    with col2:
        st.image("Operarios.jpg", caption="O lucro cresce sobre rostos que n√£o sorriem.", use_container_width=True)
    with col3:
        st.image("wall.jpg", caption="Um s√≥ caminho, e n√£o √© para todos.", use_container_width=True)

elif pagina == "üìà Dashboard":
    exibe_header("üìå Painel Econ√¥mico", "Os indicadores mais importantes em uma √∫nica busca e em um s√≥ lugar.")

    # --- CAMPO PARA SELE√á√ÉO DE M√öLTIPLOS INDICADORES E DATAS ---
    indicadores_selecionados_nomes = st.multiselect(
        "Selecione os Indicadores para visualizar:",
        NOMES_INDICADORES,
        default=[NOMES_INDICADORES[0]] if NOMES_INDICADORES else [],
        key="indicadores_dashboard_multi"
    )

    # Exibir descri√ß√µes dos indicadores selecionados
    if indicadores_selecionados_nomes:
        st.markdown("### Descri√ß√£o dos Indicadores Selecionados:")
        for ind_nome in indicadores_selecionados_nomes:
            detalhes = INDICADOR_DETALHES.get(ind_nome)
            if detalhes and detalhes.get("descricao"):
                st.markdown(f"**{ind_nome}**: *{detalhes['descricao']}*")
            else:
                st.markdown(f"**{ind_nome}**: *Descri√ß√£o n√£o dispon√≠vel.*")
        st.markdown("---")

    col_data_inicio, col_data_fim = st.columns(2)

    with col_data_inicio:
        data_inicial = st.date_input(
            "Data Inicial:",
            value=datetime.date(2020, 1, 1),
            key="data_inicial_dashboard"
        )
    with col_data_fim:
        data_final = st.date_input(
            "Data Final:",
            value=datetime.date.today(),
            key="data_final_dashboard"
        )
    # --- FIM DOS CAMPOS DE SELE√á√ÉO ---

    if data_inicial > data_final:
        st.error("Erro: A Data Inicial n√£o pode ser maior que a Data Final.")
    elif not indicadores_selecionados_nomes:
        st.warning("Por favor, selecione pelo menos um indicador para visualizar.")
    else:
        # --- BUSCA DE DADOS E PLOTAGEM ---
        with st.spinner("Buscando dados do Banco Central..."):
            df_dashboard = buscar_dados_bcb(INDICADORES_BCB_DICT, indicadores_selecionados_nomes, data_inicial, data_final)

        if not df_dashboard.empty:
            st.subheader("Dados Combinados:")
            st.dataframe(df_dashboard, use_container_width=True)

            # --- GERAR GR√ÅFICOS EM COLUNAS (2 por linha) ---
            for i in range(0, len(indicadores_selecionados_nomes), 2):
                cols = st.columns(2)

                for j in range(2):
                    if i + j < len(indicadores_selecionados_nomes):
                        indicador = indicadores_selecionados_nomes[i + j]

                        if indicador in df_dashboard.columns:
                            # Plotly Express tenta inferir tipos, mas √© bom garantir que a coluna √© num√©rica
                            df_dashboard[indicador] = pd.to_numeric(df_dashboard[indicador], errors='coerce')
                            
                            fig = px.line(
                                df_dashboard,
                                x="Data",
                                y=indicador,
                                title=f"{indicador} ao longo do tempo",
                                labels={"Data": "Data", indicador: "Valor"},
                                template="plotly_dark"
                            )

                            fig.update_xaxes(
                                rangeslider_visible=True,
                                rangeselector=dict(
                                    buttons=list([
                                        dict(count=1, label="1m", step="month", stepmode="backward"),
                                        dict(count=6, label="6m", step="month", stepmode="backward"),
                                        dict(count=1, label="1a", step="year", stepmode="backward"),
                                        dict(step="all")
                                    ])
                                )
                            )

                            with cols[j]:
                                st.plotly_chart(fig, use_container_width=True)
                        else:
                            with cols[j]:
                                st.warning(f"Dados para '{indicador}' n√£o encontrados no DataFrame retornado.")
        else:
            st.warning("N√£o foi poss√≠vel carregar dados para os indicadores e per√≠odo selecionados.")

elif pagina == "üóÉÔ∏è Dados":
    exibe_header("üóÉÔ∏è Dados", "Tenha todos os indicadores que quiser com apenas um s√≥ clique.")

    st.markdown("### Selecione Indicadores para ver os dados brutos:")

    indicadores_para_dados = st.multiselect(
        "Escolha um ou mais indicadores:",
        NOMES_INDICADORES,
        default=[NOMES_INDICADORES[0]] if NOMES_INDICADORES else [],
        key="indicadores_dados_multiselect"
    )

    col_data_inicio_dados, col_data_fim_dados = st.columns(2)
    with col_data_inicio_dados:
        data_inicial_dados = st.date_input(
            "Data Inicial:",
            value=datetime.date(2020, 1, 1),
            key="data_inicial_dados"
        )
    with col_data_fim_dados:
        data_final_dados = st.date_input(
            "Data Final:",
            value=datetime.date.today(),
            key="data_final_dados"
        )

    if not indicadores_para_dados:
        st.warning("Selecione pelo menos um indicador para visualizar os dados.")
    else:
        st.markdown("### Descri√ß√£o dos Indicadores Selecionados:")
        for ind_nome in indicadores_para_dados:
            desc = INDICADOR_DETALHES.get(ind_nome, {}).get("descricao", "Descri√ß√£o n√£o dispon√≠vel.")
            st.markdown(f"**{ind_nome}**: *{desc}*")
        st.markdown("---")

        with st.spinner("Buscando dados do Banco Central..."):
            df_dados_brutos = buscar_dados_bcb(
                INDICADORES_BCB_DICT,
                indicadores_para_dados,
                data_inicial_dados,
                data_final_dados
            )

        if not df_dados_brutos.empty:
            # A coluna 'Data' j√° vem como datetime e ordenada de buscar_dados_bcb,
            # mas vamos garantir a consist√™ncia do formato para evitar erros em pd.to_datetime
            # e a ordena√ß√£o final ap√≥s qualquer processamento
            df_dados_brutos['Data_DT'] = pd.to_datetime(df_dados_brutos['Data'], format='%d/%m/%Y')
            df_dados_brutos = df_dados_brutos.sort_values('Data_DT').reset_index(drop=True)
            
            ipca_nome = "IPCA - √çndice Nacional de Pre√ßos ao Consumidor Amplo"
            if ipca_nome in indicadores_para_dados and ipca_nome in df_dados_brutos.columns:
                # Garante que os valores do IPCA sejam num√©ricos para o c√°lculo
                ipca_valores_original = pd.to_numeric(df_dados_brutos[ipca_nome], errors='coerce')
                
                # Remove NaN's para o c√°lculo do IPCA acumulado, pois NaN's interromperiam o .cumprod()
                # Considera-se que `fillna` j√° foi feito na `buscar_dados_bcb`, mas √© uma precau√ß√£o extra.
                ipca_valores_sem_nan = ipca_valores_original.dropna()

                if not ipca_valores_sem_nan.empty:
                    # Transforma para propor√ß√£o (ex: 0.5% -> 0.005)
                    ipca_proporcao = ipca_valores_sem_nan / 100 
                    
                    # Calcula o "fator de crescimento" para cada m√™s (1 + taxa/100)
                    fatores_crescimento = 1 + ipca_proporcao
                    
                    # Calcula o produt√≥rio acumulado desses fatores
                    produtorio_acumulado = fatores_crescimento.cumprod()
                    
                    # Ajusta a s√©rie acumulada para come√ßar com o valor do primeiro IPCA original
                    # e compor os crescimentos subsequentes.
                    # Cria uma nova s√©rie Pandas com o mesmo √≠ndice para atribui√ß√£o.
                    ipca_acumulado_calculado = (produtorio_acumulado / fatores_crescimento.iloc[0]) * ipca_valores_sem_nan.iloc[0]
                    
                    # Atribui os valores calculados de volta ao DataFrame original
                    # Usamos `.loc` para garantir que a atribui√ß√£o seja feita nos locais corretos
                    df_dados_brutos["IPCA_Acumulado"] = np.nan # Inicializa a coluna
                    df_dados_brutos.loc[ipca_valores_sem_nan.index, "IPCA_Acumulado"] = ipca_acumulado_calculado
                else:
                    st.warning("N√£o h√° dados v√°lidos de IPCA para calcular o IPCA Acumulado.")
                    df_dados_brutos["IPCA_Acumulado"] = np.nan # Garante que a coluna existe, mesmo vazia

                # IPCA 12m (%) - este c√°lculo est√° correto
                # Aplica o c√°lculo apenas se houver dados suficientes
                if len(ipca_proporcao) >= 12:
                    df_dados_brutos["IPCA_12m (%)"] = (
                        (1 + ipca_proporcao).rolling(window=12).apply(np.prod, raw=True) - 1
                    ) * 100
                else:
                    df_dados_brutos["IPCA_12m (%)"] = np.nan # Preenche com NaN se n√£o houver 12 meses

            # Remove a coluna auxiliar de data se ela n√£o for mais necess√°ria
            df_dados_brutos = df_dados_brutos.drop(columns=['Data_DT'])
            
            # Exibir
            st.dataframe(df_dados_brutos, use_container_width=True)

            # Bot√£o de download
            # Cria√ß√£o do Excel em mem√≥ria
            col1, col2 = st.columns([0.5, 5.9])

            # Excel
            with col1:
                output_excel = io.BytesIO()
                with pd.ExcelWriter(output_excel, engine='xlsxwriter') as writer:
                    df_dados_brutos.to_excel(writer, index=False, sheet_name='Indicadores')
                output_excel.seek(0)
                st.download_button(
                    label="üì• Baixar Excel",
                    data=output_excel,
                    file_name="dados_indicadores_combinados.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            # CSV
            with col2:
                csv = df_dados_brutos.to_csv(index=False).encode("utf-8")
                st.download_button(
                    label="üì• Baixar CSV",
                    data=csv,
                    file_name="dados_indicadores_combinados.csv",
                    mime="text/csv"
                )
        else:
            st.warning("Nenhum dado retornado para os indicadores e per√≠odo selecionados.")

elif pagina == "üìù An√°lises e Tend√™ncias":
    exibe_header("üìù Relat√≥rios", "Gere e visualize relat√≥rios.")

    st.info("Em breve, relat√≥rios autom√°ticos estar√£o dispon√≠veis.")
    st.text_area("Digite anota√ß√µes ou um rascunho de relat√≥rio:")
    # st.button("Gerar Relat√≥rio") # Adicione um bot√£o para "Gerar Relat√≥rio" aqui no futuro

elif pagina == "‚ö†Ô∏è Alertas e Cen√°rios":
    exibe_header("‚öôÔ∏è Configura√ß√µes", "Personalize sua experi√™ncia.")

    # Tema n√£o √© control√°vel diretamente via Streamlit CSS para o tema global.
    # Mas voc√™ pode simular a altera√ß√£o de tema ajustando cores de gr√°ficos etc.
    # st.selectbox("Escolha um tema:", ["Claro", "Escuro"], index=1 if st.get_option("theme.base") == "dark" else 0)
    
    st.subheader("Configura√ß√µes de Notifica√ß√µes")
    notificacoes = st.checkbox("Receber notifica√ß√µes por email?", value=False)
    
    if notificacoes:
        email = st.text_input("Email para notifica√ß√µes:", placeholder="seu.email@exemplo.com")
        if st.button("Salvar Configura√ß√µes de Notifica√ß√£o"):
            if "@" in email and "." in email: # Valida√ß√£o b√°sica de email
                st.success(f"Configura√ß√µes de notifica√ß√£o salvas para {email}!")
                # Aqui voc√™ pode salvar o email em um banco de dados ou vari√°vel de sess√£o
            else:
                st.error("Por favor, insira um email v√°lido.")
    else:
        st.info("As notifica√ß√µes por email est√£o desativadas.")


elif pagina == "üí¨ Feedback":
    exibe_header("üí¨ Envie seu Feedback", "Sua opini√£o √© muito importante para n√≥s!")

    st.write("Utilize este formul√°rio para enviar sugest√µes, reportar bugs ou fazer perguntas. Seu feedback nos ajuda a melhorar!")

    with st.form("feedback_ticket_form"):
        nome = st.text_input("Seu Nome (Opcional):")
        email = st.text_input("Seu Email (Opcional - para contato):")
        assunto = st.text_input("Assunto (Ex: Bug no Dashboard, Sugest√£o de Novo Indicador):")
        tipo_ticket = st.selectbox(
            "Tipo de Ticket:",
            ["Bug", "Sugest√£o", "D√∫vida", "Outro"]
        )
        prioridade = st.selectbox(
            "Prioridade (para bugs/melhorias):",
            ["Baixa", "M√©dia", "Alta", "Cr√≠tica"]
        )
        mensagem = st.text_area("Descreva sua mensagem ou problema detalhadamente:", height=200)

        submitted = st.form_submit_button("Enviar Ticket de Feedback")

        if submitted:
            if not mensagem:
                st.warning("Por favor, preencha o campo de mensagem antes de enviar.")
            else:
                backend_api_url = "https://script.google.com/macros/s/AKfycbyZ-cd3NC8EuFzMImOu1Ta34B9sMeB6yTsDjI1eOWORtcOdsUQ1EK72zl2s45Y06aXs/exec"

                feedback_data = {
                    "timestamp": datetime.datetime.now().isoformat(),
                    "nome": nome if nome else "N√£o informado",
                    "email": email if email else "N√£o informado",
                    "assunto": assunto,
                    "tipo": tipo_ticket,
                    "prioridade": prioridade,
                    "mensagem": mensagem
                }

                try:
                    # Define um timeout para a requisi√ß√£o para evitar travamentos
                    response = requests.post(backend_api_url, json=feedback_data, timeout=15) 

                    if response.status_code == 200:
                        st.success("‚úÖ Seu feedback foi enviado com sucesso!")
                        st.info("Verifique sua planilha Google para visualizar o feedback.")
                    else:
                        st.error(f"‚ùå Ocorreu um erro ao enviar seu feedback. C√≥digo: {response.status_code} - {response.text}")
                        st.info("Por favor, tente novamente mais tarde ou entre em contato direto.")

                except requests.exceptions.ConnectionError:
                    st.error("‚ùå Erro de conex√£o: N√£o foi poss√≠vel alcan√ßar o servidor de feedback. Verifique sua conex√£o com a internet ou tente mais tarde.")
                except requests.exceptions.Timeout:
                    st.error("‚ùå Tempo limite excedido: O servidor de feedback demorou muito para responder. Tente novamente.")
                except Exception as e:
                    st.error(f"‚ùå Ocorreu um erro inesperado ao enviar o feedback: {e}")

# --- FOOTER ---
st.markdown("---")
st.markdown(
    "<p style='text-align: center; color: grey;'>Developed by N√∫cleo de Estudos em Economia Emp√≠rica ¬∑ 2025</p>",
    unsafe_allow_html=True
)